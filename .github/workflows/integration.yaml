# reusable workflow triggered by other actions
name: Continuous Integration

on:
  workflow_call:
    secrets:
      charmcraft-credentials:
        required: true

jobs:
  lib-check:
    name: Check libraries
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Check libs
        uses: canonical/charming-actions/check-libraries@2.0.0-rc
        with:
          credentials: "${{ secrets.charmcraft-credentials }}"
          github-token: "${{ secrets.GITHUB_TOKEN }}"
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        charm: [operator, serving, eventing]
    steps:
      - uses: actions/checkout@v2
      - run: sudo apt update && sudo apt install tox
      - run: tox -e ${{ matrix.charm }}-lint
  unit:
    name: Unit Test
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        charm: [operator, serving, eventing]
    steps:
      - uses: actions/checkout@v2
      - run: sudo apt update && sudo apt install tox
      - run: tox -e ${{ matrix.charm }}-unit

  integration:
    name: Integration Test
    runs-on: self-hosted-32gb

    steps:        
      - name: Check out repo
        uses: actions/checkout@v2

      - name: Setup operator environment
        run: |
          echo "# Install core snap"
          /usr/bin/sudo snap install core

          echo "# Install LXD"
          /usr/bin/sudo apt-get remove -qy lxd lxd-client || true
          /usr/bin/sudo snap install lxd

          echo "# Initialize LXD"
          /usr/bin/sudo lxd waitready
          /usr/bin/sudo lxd init --auto
          /usr/bin/sudo chmod a+wr /var/snap/lxd/common/lxd/unix.socket
          /snap/bin/lxc network set lxdbr0 ipv6.address none
          /usr/bin/sudo usermod -a -G lxd $USER

          echo "# Configure LXD"
          /usr/bin/sudo lxc --project charmcraft project create local:charmcraft || true
          /usr/bin/sudo lxc --project charmcraft profile device add default root disk path=/ pool=default type=disk || true
          /usr/bin/sudo lxc --project charmcraft profile device add default eth0 nic name=eth0 network=lxdbr0 || true
          /usr/bin/sudo lxc --project charmcraft profile set default environment.http_proxy http://squid.internal:3128/
          /usr/bin/sudo lxc --project charmcraft profile set default environment.https_proxy http://squid.internal:3128/
          /usr/bin/sudo lxc --project charmcraft profile set default environment.HTTP_PROXY http://squid.internal:3128/
          /usr/bin/sudo lxc --project charmcraft profile set default environment.HTTPS_PROXY http://squid.internal:3128/

          echo "# Install tox"
          /usr/bin/sudo apt-get update -yqq
          /usr/bin/sudo apt-get install -yqq python3-pip
          /usr/bin/sudo --preserve-env=http_proxy,https_proxy,no_proxy pip3 install tox

          echo "# Install Juju"
          /usr/bin/sudo snap install juju --classic --channel=latest/stable

          echo "# Install tools"
          /usr/bin/sudo snap install jq
          /usr/bin/sudo snap install charm --classic --channel=latest/stable
          /usr/bin/sudo snap install charmcraft --classic --channel=latest/stable
          /usr/bin/sudo snap install juju-bundle --classic --channel=latest/stable

          echo "# Install microk8s"
          /usr/bin/sudo snap install microk8s --classic --channel=1.22/stable

          echo "# Initialize microk8s"
          /usr/bin/bash -c "sudo usermod -a -G microk8s $USER"
          /usr/bin/sg microk8s -c "microk8s status --wait-ready"
          /usr/bin/sg microk8s -c "microk8s enable dns:10.130.64.38 storage metallb:"10.64.140.43-10.64.140.49,192.168.0.105-192.168.0.111""
          /usr/bin/sg microk8s -c "microk8s kubectl -n kube-system rollout status deployment/coredns"
          /usr/bin/sg microk8s -c "microk8s kubectl -n kube-system rollout status deployment/hostpath-provisioner"
          /usr/bin/sg microk8s -c "microk8s kubectl -n kube-system rollout status ds/calico-node"
          /usr/bin/sg microk8s -c "microk8s config > $HOME/.kube/config"

          echo "# Bootstrap controller"
          sleep 180  # Microk8s needs time to initialize properly
          /usr/bin/sg microk8s -c "juju bootstrap --debug --verbose microk8s uk8s-controller --model-default test-mode=true --model-default automatically-retry-hooks=true --model-default logging-config='<root>=DEBUG'  --bootstrap-constraints=''"

      # - name: Setup operator environment
      #   uses: charmed-kubernetes/actions-operator@main
      #   with:
      #     provider: microk8s
      #     channel: 1.21/stable

      # - run: sg microk8s -c "microk8s enable metallb:'10.64.140.43-10.64.140.49,192.168.0.105-192.168.0.111'"
      # - run: mkdir -p $HOME/.kube
      # - run: sudo usermod -a -G microk8s ubuntu
      # - run: sudo chown -f -R ubuntu ~/.kube
      # - run: microk8s config > $HOME/.kube/config
      # - run: juju add-model knative-test
      # - run: echo $HOME/.kube/config

      - name: Run integration tests

        run: tox -vve integration -- --model knative-test --destructive-mode
        env:
          KUBECONFIG: $HOME/.kube/config
      
      - name: Setup tmate session
        if: failure()
        uses: mxschmitt/action-tmate@v3
        timeout-minutes: 60
        with:
          limit-access-to-actor: true

      - run: kubectl get all -A
        if: failure()
      
      - run: kubectl get ksvc -A
        if: failure()
      
      - run: kubectl get broker -A
        if: failure()
      
      - run: kubectl get trigger -A
        if: failure()

      - run: juju status
        if: failure()
